------------------------------------------------------------------------------------------------------
--			Fonctions perso
------------------------------------------------------------------------------------------------------
function sms(txt)
            commandArray['SendNotification']=script..txt
end

-- envoi une demande de tts ou de commande si command à true
function jarvis(txt, command)
	if command ~= nil then
		command='order'
	else
		command='say'
	end
	os.execute('curl -G --data-urlencode "'..command..'='..txt..'" "http://192.168.0.40:8080"')
end

function log(txt,lvl)
    if lvl==nil or lvl==0 then
        print(script .. '#LOG: ' .. txt)
    elseif lvl>=3 then
        error(script .. ' ' .. txt)
    else
        if lvl<=loglevel then
            if lvl==1 then
                print(script .. '#INFO:  ' .. txt)
            elseif lvl==2 then
                print(script .. '#DEBUG: ' .. txt)
            end
        end
    end
end

------------------------------------------------------------------------------------------------------
--			Fonctions domoticz
------------------------------------------------------------------------------------------------------
-- retourne le temps en seconde depuis la dernière maj du péréphérique
function lastSeen(device)
  timestamp = otherdevices_lastupdate[device] or uservariables_lastupdate[device] or device
  y, m, d, H, M, S = timestamp:match("(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)")
  difference = os.difftime(os.time(), os.time{year=y, month=m, day=d, hour=H, min=M, sec=S})
  return difference
end

-- Toggle a device
function switch(device)
	os.execute(curl..'-u '..domoticzUSER..':'..domoticzPSWD..' "'..domoticzURL..'/json.htm?type=command&param=switchlight&idx='..otherdevices_idx[device]..'&switchcmd=Toggle&passcode='..domoticzPASSCODE..'" &')
end

-- switch On a device and set level if dimmmable
function switchOn(device,level)
	local api = '/json.htm?type=command&param=switchlight'
	local idx = '&idx='..otherdevices_idx[device]
	local cmd
	if level ~= nil then 
		cmd = '&switchcmd=Set%20Level&level='..level
	else
		cmd = '&switchcmd=On'
	end
	local passcode = '&passcode='..domoticzPASSCODE
	api = api..idx..cmd..passcode
	os.execute(curl..'-u '..domoticzUSER..':'..domoticzPSWD..' "'..domoticzURL..api..'" &')
end

-- switch On a devive for x secondes 
function switchOnFor(device, secs)
   switchOn(device)
   commandArray[device] = "Off AFTER "..secs
end

-- switch on light rgb
function switchColor(device,hexacolor)
os.execute(curl..'-u '..domoticzUSER..':'..domoticzPSWD..' "'..domoticzURL..'/json.htm?type=command&param=setcolbrightnessvalue&hex='..hexacolor..'&brightness=100&iswhite=false&idx='..otherdevices_idx[device]..'" &')
end

-- switch Off a device
function switchOff(device)
	os.execute(curl..'-u '..domoticzUSER..':'..domoticzPSWD..' "'..domoticzURL..'/json.htm?type=command&param=switchlight&idx='..otherdevices_idx[device]..'&switchcmd=Off&passcode='..domoticzPASSCODE..'" &')
end

-- switch On a group or scene
function groupOn(device)
	os.execute(curl..'-u '..domoticzUSER..':'..domoticzPSWD..' "'..domoticzURL..'/json.htm?type=command&param=switchscene&idx='..otherdevices_scenesgroups_idx[device]..'&switchcmd=On&passcode='..domoticzPASSCODE..'" &')
end

-- switch Off a group
function groupOff(device)
	os.execute(curl..'-u '..domoticzUSER..':'..domoticzPSWD..' "'..domoticzURL..'/json.htm?type=command&param=switchscene&idx='..otherdevices_scenesgroups_idx[device]..'&switchcmd=Off&passcode='..domoticzPASSCODE..'" &')
end

function groupState(group)
        -- v1.0. 2016-01-18
        -- Checks the state of a group of swithces.
        -- USAGE   : GroupState({'Switch1','Switch2','Switch3','Switch4','Switch5',more switches})
        -- RETURNS : 'On'       if all switches are on.
        --         : 'Off'      if all switches are off.
        --         : 'Mixed"    if one or more, but not all switches are on.
        --
        local iState = 0
        local iCount = 0
        local sState = ''
        for i,light in pairs(group) do
                if (otherdevices[light] == 'On') then
                        iState = iState + 1
                end
        iCount = iCount + 1
        end
        if(iState == 0) then sState = "Off" end
        if(iState > 0) then sState = 'Mixed' end
        if(iState == iCount) then sState = 'On' end
--      print("iCount   : " .. iCount)
--      print("iState   : " .. iState)
--      print("sState   : " .. sState)
        return sState
end

-- vérifie s'il y a eu changement d'état
function stateChange(device)
	if (uservariables['lastState_'..device] == nil) then
		creaVar('lastState_'..device,otherdevices[device])
		log('stateChange : création variable manquante lastState_'..device,debug)
		return false
	elseif (devicechanged[device] == nil) then
		return false
	elseif (devicechanged[device] == uservariables['lastState_'..device]) then
		return false
	else
		updateVar('lastState_'..device,otherdevices[device])
		return true
	end
end	

function makeVar(name,value)
    if uservariables[name]==nil then
    	local url = 'curl "'..domoticzURL..'/json.htm?type=command&param=saveuservariable&vname='..url_encode(name)..'&vtype=2&vvalue='..url_encode(value)..'" &'
        os.execute(url)
    else
    	local url = 'curl "'..domoticzURL..'/json.htm?type=command&param=updateuservariable&vname='..url_encode(name)..'&vtype=2&vvalue='..url_encode(value)..'" &'
        os.execute(url)
    end
end
------------------------------------------------------------------------------------------------------
--			Fonctions I/O
------------------------------------------------------------------------------------------------------
-- io.popen() output or web page content return
-- usage:
-- local resultat = io.capture(cmd , true)
function io.capture(cmd, raw)
  local file = assert(io.popen(cmd, 'r'))
  local result = assert(file:read('*a'))
  file:close()
  if raw then return result end
  result = string.gsub(result, '^%s+', '')
  result = string.gsub(result, '%s+$', '')
  result = string.gsub(result, '[\n\r]+', ' ')
  return result
end

-- écriture dans un fichier texte dans le dossier lua
function logToFile(fileName,data)
	f = assert(io.open(luaDir..fileName..'.txt',"a"))
	f:write(os.date("%c")..' '..data..'\n')
	f:close()
end  

-- teste l'existance d'un fichier
function file_exists(file)
     local f = io.open(file, "rb")
     if f then f:close() end
     return f ~= nil
end
   
-- encode du texte pour le passer dans une url
function url_encode(str)
  if (str) then
    str = string.gsub (str, "\n", "\r\n")
    str = string.gsub (str, "([^%w %-%_%.%~])",
        function (c) return string.format ("%%%02X", string.byte(c)) end)
    str = string.gsub (str, " ", "+")
  end
  return str	
end

-- supprime les accents de la chaîne
function sans_accent(str)
    if (str) then
		str = string.gsub (str,"Ç", "C")
		str = string.gsub (str,"ç", "c")
		str = string.gsub (str,"[-èéêë']+", "e")
		str = string.gsub (str,"[-ÈÉÊË']+", "E")
		str = string.gsub (str,"[-àáâãäå']+", "a")
		str = string.gsub (str,"[-@ÀÁÂÃÄÅ']+", "A")
		str = string.gsub (str,"[-ìíîï']+", "i")
		str = string.gsub (str,"[-ÌÍÎÏ']+", "I")
		str = string.gsub (str,"[-ðòóôõö']+", "o")
		str = string.gsub (str,"[-ÒÓÔÕÖ']+", "O")
		str = string.gsub (str,"[-ùúûü']+", "u")
		str = string.gsub (str,"[-ÙÚÛÜ']+", "U")
		str = string.gsub (str,"[-ýÿ']+", "y")
		str = string.gsub (str,"Ý", "Y")
    end
    return str
end
